/**
 * ScriptDoc for Sortable.js
 */

/**
 * Creates a new Observer for a DragAndDrop object. Used for customization.
 * @id MochiKit.Sortable.SortableObserver
 * @alias SortableObserver
 * @alias MochiKit.Sortable.SortableObserver
 * @constructor
 * @param {Node} element Element to observe.
 * @param {Object} observer    Observer to use.
 * @type {SortableObserver} SortableObserver object.
 */

/**
 * Function to call on the start of a drag and drop event.
 * @id MochiKit.Sortable.onStart
 * @alias onStart
 * @alias MochiKit.Sortable.SortableObserver.onStart
 */

/**
 * Function to call on the end of a drag and drop event.
 * @id MochiKit.Sortable.onEnd
 * @alias onEnd
 * @alias MochiKit.Sortable.SortableObserver.onEnd
 */

/**
 * Returns a list of options for a Sortable.
 * @id MochiKit.Sortable.options
 * @alias options
 * @alias MochiKit.Sortable.Sortable.options
 * @param {Node} element Element to get the Sortable options for.
 */

/**
 * Deletes a Sortable object.
 * @id MochiKit.Sortable.destroy
 * @alias destroy
 * @alias MochiKit.Sortable.Sortable.destroy
 * @param {Node} element    Sortable object to delete.
 */

/**
 * Creates a new Sortable object.
 * @id MochiKit.Sortable.create
 * @alias create
 * @alias MochiKit.Sortable.Sortable.create
 * @param {Node} element    Element to use to create the Sortable.
 * @param {Object} options    List of options to apply to the Sortable.
 */

/**
 * List of options to pass to Sortable.create.
 * @id MochiKit.Sortable.options
 * @alias options
 * @alias MochiKit.Sortable.Sortable.create#options
 */

/**
 * Element to use. Default is "element".
 * @id MochiKit.Sortable.element
 * @alias element
 * @alias MochiKit.Sortable.Sortable.create#options.element
 */

/**
 * Tag name for the Sortable. Default is "li". Override with "tagname".
 * @id MochiKit.Sortable.tag
 * @alias tag
 * @alias MochiKit.Sortable.Sortable.create#options.tag
 */

/**
 * Object can be dropped on an empty object. Default is false.
 * @id MochiKit.Sortable.dropOnEmpty
 * @alias dropOnEmpty
 * @alias MochiKit.Sortable.Sortable.create#options.dropOnEmpty
 */

/**
 * Creates a Sortable tree. Default is false.
 * @id MochiKit.Sortable.tree
 * @alias tree
 * @alias MochiKit.Sortable.Sortable.create#options.tree
 */

/**
 * Tag name to use for the Sortable tree. Default is "ul".
 * @id MochiKit.Sortable.treeTag
 * @alias treeTag
 * @alias MochiKit.Sortable.Sortable.create#options.treeTag
 */

/**
 * Specifies horizontal or vertical overlap. Default is "vertical".
 * @id MochiKit.Sortable.overlap
 * @alias overlap
 * @alias MochiKit.Sortable.Sortable.create#options.overlap
 */

/**
 * Specifies horizontal or vertical constraint, an array of elements, element ids, or false.
 * Default is "vertical".
 * @id MochiKit.Sortable.constraint
 * @alias constraint
 * @alias MochiKit.Sortable.Sortable.create#options.constraint
 */

/**
 * Specifies containment for the Sortable. Default is "[element]".
 * @id MochiKit.Sortable.containment
 * @alias containment
 * @alias MochiKit.Sortable.Sortable.create#options.containment
 */

/**
 * Specifies a CSS class to use as a handle for the Sortable. Default is false.
 * @id MochiKit.Sortable.handle
 * @alias handle
 * @alias @alias MochiKit.Sortable.Sortable.create#options.handle
 */

/**
 * Specifies A CSS class or array of classes to be used with the tag name to filter the children.
 * @id MochiKit.Sortable.only
 * @alias only
 * @alias MochiKit.Sortable.Sortable.create#options.only
 */

/**
 * CSS class to apply on hover.
 * @id MochiKit.Sortable.hoverclass
 * @alias hoverclass
 * @alias MochiKit.Sortable.Sortable.create#options.hoverclass
 */

/**
 * Create a ghost from the Sortable. Default is false.
 * @id MochiKit.Sortable.ghosting
 * @alias ghosting
 * @alias MochiKit.Sortable.Sortable.create#options.ghosting
 */

/**
 * Element to scroll around. Default is false.
 * @id MochiKit.Sortable.scroll
 * @alias scroll
 * @alias MochiKit.Sortable.Sortable.create#options.scroll
 */

/**
 * Scroll sensitivity.
 * @id MochiKit.Sortable.scrollSensitivity
 * @alias scrollSensitivity
 * @alias MochiKit.Sortable.Sortable.create#options.scrollSensitivity
 */

/**
 * Scroll speed.
 * @id MochiKit.Sortable.scrollSpeed
 * @alias scrollSpeed
 * @alias MochiKit.Sortable.Sortable.create#options.scrollSpeed
 */

/**
 * Formats the Sortable. Default is "/^[^_]*_(.*)$/"
 * @id MochiKit.Sortable.format
 * @alias format
 * @alias MochiKit.Sortable.Sortable.create#options.format
 */

/**
 * Function to call on a onchange event. Default is MochiKit.Base.noop.
 * @id MochiKit.Sortable.onChange
 * @alias onChange
 * @alias MochiKit.Sortable.Sortable.create#options.onChange
 */

/**
 * Function to call on an onupdate event. Default is MochiKit.Base.noop.
 * @id MochiKit.Sortable.onUpdate
 * @alias onUpdate
 * @alias MochiKit.Sortable.Sortable.create#options.onUpdate
 */

/**
 * CSS classes accepted by the object. Default is null.
 * @id MochiKit.Sortable.accept
 * @alias accept
 * @alias MochiKit.Sortable.Sortable.create#options.accept
 */

/**
 * Returns all elements that are appropriate to use for a Sortable object in a guaranteed order.
 * @id MochiKit.Sortable.findElements
 * @alias findElements
 * @alias MochiKit.Sortable.Sortable.findElements
 * @param {Node} element    Element to use for the Sortable.
 * @param {Object} options    Options to use for the Sortable.
 * @return {Object} Returns all elements that are appropriate to use for a Sortable object in a guaranteed order.
 */

/**
 * Returns returns all elements that are appropriate to use for a Sortable tree in a guaranteed order.
 * @id MochiKit.Sortable.findTreeElements
 * @alias findTreeElements
 * @alias MochiKit.Sortable.Sortable.findTreeElements
 * @param {Node} element    Element to use for the Sortable.
 * @param {Object} options    Options to use for the Sortable.
 * @return {Object} Returns returns all elements that are appropriate to use for a Sortable tree in a guaranteed order.
 */

/**
 * Returns the child nodes of the specified element.
 * @id MochiKit.Sortable.findChildren
 * @alias findChildren
 * @alias MochiKit.Sortable.Sortable.findChildren
 * @param {Node} element    Element to find the child nodes of.
 * @param {String} only    CSS class name to use as a filter.
 * @param {Boolean} recursive If true, specifies that the search is recursive.
 * @param {String} tagName    Tag name to use as a filter.
 */

/**
 * Specifies behavior to use when a user hovers over the element.
 * @id MochiKit.Sortable.onHover
 * @alias onHover
 * @alias MochiKit.Sortable.Sortable.onHover
 * @param {Node} element    Element to use.
 * @param {Node} dropon    Element to drop the Sortable on.
 * @param {Number} overlap Percent overlap. (e.g. .33 for 33%)
 */

/**
 * Specifies behavior to use when a user hovers over the element with an empty element.
 * @id MochiKit.Sortable.onEmptyHover
 * @alias onEmptyHover
 * @alias MochiKit.Sortable.Sortable.onEmptyHover
 * @param {Node} element    Element to use.
 * @param {Node} dropon    Element to drop the Sortable on.
 * @param {Number} overlap    Percent overlap. (e.g. .33 for 33%)
 */

/**
 * Deletes a marker from a Sortable.
 * @id MochiKit.Sortable.unmark
 * @alias unmark
 * @alias MochiKit.Sortable.Sortable.unmark
 */

/**
 * Adds a marker to a Sortable.
 * @id MochiKit.Sortable.mark
 * @alias mark
 * @alias MochiKit.Sortable.Sortable.mark
 * @param {Node} dropon    Element to drop the marker on.
 * @param {Object} position    Position of the marker.
 */

/**
 * Creates a Sortable tree.
 * @id MochiKit.Sortable.tree
 * @alias tree
 * @alias MochiKit.Sortable.Sortable.tree
 * @param {Node} element    Element to use to create the Sortable tree.
 * @param {Object} options    Options to use to create the Sortable tree.
 */

/**
 * Creates a sequence for the Sortable.
 * @id MochiKit.Sortable.sequence
 * @alias sequence
 * @alias MochiKit.Sortable.Sortable.sequence
 * @param {Node} element    Element to use for the Sortable.
 * @param {Object} options    Options to use for the Sortable.
 */

